#pragma once

// Copyright Evgeny Panasyuk 2013.
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
// e-mail: E?????[dot]P???????[at]gmail.???

// Full emulation of await feature from C# language in C++ based on Stackful Coroutines from
// Boost.Coroutine library.
// This proof-of-concept shows that exact syntax of await feature can be emulated with help of
// Stackful Coroutines, demonstrating that it is superior mechanism.
// Main aim of this proof-of-concept is to draw attention to Stackful Coroutines.

#define BOOST_THREAD_PROVIDES_FUTURE_CONTINUATION
#define BOOST_THREAD_PROVIDES_FUTURE
#define BOOST_RESULT_OF_USE_DECLTYPE

#include <boost/coroutine/all.hpp>
#include <boost/thread.hpp>

#include <functional>
#include <utility>
#include <memory>
#include <stack>
#include <queue>

// ___________________________________________________________ //

template<typename T>
class concurrent_queue
{
	std::queue<T> q;
	boost::mutex m;
	boost::condition_variable c;
public:
	template<typename U>
	void push(U &&u)
	{
		boost::lock_guard<boost::mutex> l(m);
		q.push( std::forward<U>(u) );
		c.notify_one();
	}
	void pop(T &result)
	{
		boost::unique_lock<boost::mutex> u(m);
		c.wait(u, [&]{return !q.empty();} );
		result = std::move_if_noexcept(q.front());
		q.pop();
	}
};

typedef std::function<void()> Task;
extern concurrent_queue<Task> main_tasks;
// ___________________________________________________________ //

typedef boost::coroutines::coroutine<void()> Coro;
struct CurrentCoro
{
	std::shared_ptr<Coro> coro;
	Coro::caller_type *caller;
};
extern thread_local std::stack<CurrentCoro> coro_stack;

template<typename F>
auto asynchronous(F f) -> boost::future<decltype(f())>
{
	typedef boost::promise<decltype(f())> CoroPromise;

	CoroPromise coro_promise;
	auto coro_future = coro_promise.get_future();

	// It is possible to avoid shared_ptr and use move-semantic,
	// but it would require to refuse use of std::function (it requires CopyConstructable),
	// and would lead to further complication and is unjustified
	// for purposes of this proof-of-concept
	CurrentCoro current_coro =
	{
		std::make_shared<Coro>(std::bind( [f](CoroPromise &coro_promise, Coro::caller_type &caller)
		{
			caller();
			coro_stack.top().caller = &caller;
			coro_promise.set_value( f() );
		}, std::move(coro_promise), std::placeholders::_1 )), nullptr
	};

	coro_stack.push( std::move(current_coro) );
	(*coro_stack.top().coro)();
	coro_stack.pop();

	return coro_future;
}

struct Awaiter
{
	template<typename Future>
	auto operator*(Future &&ft) -> decltype(ft.get())
	{
		typedef decltype(ft.get()) Result;

		auto &&current_coro = coro_stack.top();
		auto result = ft.then([current_coro](Future &ft) -> Result
		{
			main_tasks.push([current_coro]
			{
				coro_stack.push(std::move(current_coro));
				(*coro_stack.top().coro)();
				coro_stack.pop();
			});
			return ft.get();
		});
		(*coro_stack.top().caller)();
		return result.get();
	}
};
#define await Awaiter()*

